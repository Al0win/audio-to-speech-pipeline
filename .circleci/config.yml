version: 2.1

parameters:
  # A parameter per package
  pipeline_workflows:
    type: boolean
    default: false
  ekstep_data_pipelines:
    type: boolean
    default: true

executors:
  node:
    docker:
      - image: circleci/python:3.8.6

jobs:
  build-dags:
    parameters:
      package_name:
        type: string
      env_name:
        type: string
    machine:
      image: ubuntu-1604:201903-01
    working_directory: ~/project/packages/pipeline_workflows
    steps:
      - checkout:
          path: ~/project
      - run:
          name: Build Image
          command: |
            ls -ltr . ; pwd
      - run:
          name: Deploy Pipeline Workflow DAG
          command: |
            echo ${AZURE_AUTH} > ${HOME}/azure-auth.json
            az login --service-principal --username ${AZURE_CLIENT_ID} --password ${AZURE_CLIENT_SECRET} --tenant ${AZURE_TENANT_ID}
            az account set --subscription ${AZURE_SUBSCRIPTION_ID}
            sh ~/project/packages/pipeline_workflows/deployDAG.sh << parameters.env_name >>
            rm ${HOME}/azure-auth.json

  build:
    parameters:
      package_name:
        type: string

    executor: node
    working_directory: ~/project/packages/<< parameters.package_name >>

    steps:
      - checkout:
          path: ~/project
      - run:
          name: Sanity check to confirm correct package directory
          command: echo "Current package directory is << parameters.package_name >> ..."
      - run:
          name: Setup Testing Environment
          command: |
            python --version ; pip --version ; pwd ; ls
            sudo apt-get update
            sudo apt-get install -y ffmpeg
            sudo apt-get install -y sox
            sudo apt-get install -y gcc-multilib g++-multilib
            sudo apt-get install libpq-dev
            pip install --upgrade pip
            pip install -r requirements.txt
            python --version ; pip --version ; pwd ; ls
      - persist_to_workspace:
          root: ~/project
          paths:
            - packages/<< parameters.package_name >>

  ekstep_build:
    executor: node
    working_directory: ~/project/packages
    steps:
      - checkout:
          path: ~/project
      - run:
          name: Setup Testing Environment
          command: |
            python --version ; pip --version ; pwd ; ls
            sudo apt-get update --allow-releaseinfo-change
            sudo apt-get install -y ffmpeg
            sudo apt-get install -y sox
            sudo apt-get install -y gcc-multilib g++-multilib
            sudo apt-get install libpq-dev
            pip install --upgrade pip
            pip install -r requirements.txt
            python --version ; pip --version ; pwd ; ls
      - run:
          name: Generate Linting Report
          command: |
            set +e
            mkdir -p linting_report
            pylint `pwd`  --exit-zero > linting_report/linting_report_.txt
      - store_artifacts:
          path: linting_report
      - persist_to_workspace:
          root: ~/project
          paths:
            - packages

  deploy:
    parameters:
      package_version:
        type: string
      env_name:
        type: string
    machine:
      image: ubuntu-1604:201903-01
    working_directory: ~/project/packages
    steps:
      - attach_workspace:
          at: ~/project
      - run:
          name: Content to deploy
          command: ls
      - run:
          name: Build and Deploy Image
          command: |
            echo ${AZURE_AUTH} > ${HOME}/azure-auth.json
            az login --service-principal --username ${AZURE_CLIENT_ID} --password ${AZURE_CLIENT_SECRET} --tenant ${AZURE_TENANT_ID}
            az account set --subscription ${AZURE_SUBSCRIPTION_ID}
            if [[ << parameters.env_name >> == "test" ]]; then
              docker build --rm=false -t ${AZURE_CONTAINER_REGISTRY}.azurecr.io/ekstep_data_pipelines:<< parameters.package_version >> -t ${AZURE_CONTAINER_REGISTRY}.azurecr.io/ekstep_data_pipelines:<< parameters.env_name >>_<< parameters.package_version >> .
            else
              az acr repository show --name ${AZURE_CONTAINER_REGISTRY} --image ekstep_data_pipelines:<< parameters.package_version >>
              docker tag ${AZURE_CONTAINER_REGISTRY}.azurecr.io/ekstep_data_pipelines:<< parameters.package_version >> ${AZURE_CONTAINER_REGISTRY}.azurecr.io/ekstep_data_pipelines:<< parameters.env_name >>_<< parameters.package_version >>
            fi
            az acr repository push --name ${AZURE_CONTAINER_REGISTRY} --image ekstep_data_pipelines:<< parameters.package_version >>
      - run:
          name: Remove account details
          command: rm ${HOME}/azure-auth.json ; ls

  approval_for_prod_deploy:
    docker:
      - image: circleci/node:4.8.2
    steps:
      - run: echo "Hold for approval"

  E2E:
    working_directory: ~/E2E
    docker:
      - image: circleci/openjdk:8-jdk-stretch
        environment:
          POSTGRES_USER: $POSTGRES_USER
          POSTGRES_PASSWORD: $POSTGRES_PASSWORD
    steps:
      - checkout:
          path: ~/project
      - run:
          name: E2E Tests
          command: |
            mkdir -p ~/.ssh
            echo ${SSH} > ~/.ssh/known_hosts
            cat ~/.ssh/known_hosts
            git clone git@github.com:Open-Speech-EkStep/E2ETest.git
            cd ${HOME}
            wget https://aka.ms/InstallAzureCLIDeb | sudo bash
            echo ${AZURE_AUTH} > ${HOME}/azure-auth.json
            az login --service-principal --username ${AZURE_CLIENT_ID} --password ${AZURE_CLIENT_SECRET} --tenant ${AZURE_TENANT_ID}
            az account set --subscription ${AZURE_SUBSCRIPTION_ID}
            export AZURE_APPLICATION_CREDENTIALS=${HOME}/azure-auth.json
            echo $AZURE_APPLICATION_CREDENTIALS
            wget https://dl.google.com/cloudsql/cloud_sql_proxy.linux.amd64 -O cloud_sql_proxy
            chmod +x cloud_sql_proxy
            nohup ./cloud_sql_proxy -dir=./cloudsql -instances=${AZURE_PROJECT}:us-central1:${DB_INSTANCE}=tcp:5432 &
            sleep 25s
            cat nohup.out
            cd ~/E2E/E2ETest
            mvn dependency:go-offline
            mvn package

  deploy-db:
    parameters:
      mode:
        type: string
      env_name:
        type: string
    working_directory: ~/project/
    docker:
      - image: circleci/python:3.8.6
        environment:
          POSTGRES_USER: $POSTGRES_USER
          POSTGRES_PASSWORD: $POSTGRES_PASSWORD
    steps:
      - checkout:
          path: ~/project
      - run:
          name: Setup proxy for psql and environment
          command: |
            mkdir -p ~/.ssh
            echo ${SSH} > ~/.ssh/known_hosts
            cat ~/.ssh/known_hosts
            cd ${HOME}
            wget https://aka.ms/InstallAzureCLIDeb | sudo bash
            echo ${AZURE_AUTH} > ${HOME}/azure-auth.json
            az login --service-principal --username ${AZURE_CLIENT_ID} --password ${AZURE_CLIENT_SECRET} --tenant ${AZURE_TENANT_ID}
            az account set --subscription ${AZURE_SUBSCRIPTION_ID}
            export AZURE_APPLICATION_CREDENTIALS=${HOME}/azure-auth.json
            echo $AZURE_APPLICATION_CREDENTIALS
            wget https://dl.google.com/cloudsql/cloud_sql_proxy.linux.amd64 -O cloud_sql_proxy
            chmod +x cloud_sql_proxy
            nohup ./cloud_sql_proxy -dir=./cloudsql -instances=${AZURE_PROJECT}:us-central1:${DB_INSTANCE}=tcp:5432 &
            sleep 25s
            cat nohup.out
            pip install yoyo-migrations
            pip install psycopg2
      - run:
          name: Update migrations
          command: |
            ls ./migrations
            echo " The mode is << parameters.mode >>"
            export env_name=_<< parameters.env_name >>
            if [[ $env_name == "_prod" ]]
            then
              export env_name=''
            fi
            yoyo << parameters.mode >> --database postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@localhost/${POSTGRES_DB} --all -b ./migrations

workflows:
  version: 2

  ekstep_data_pipelines:
    jobs:
      - ekstep_build:
          name: ekstep_data_pipelines_build
      - deploy:
          name: ekstep_data_pipelines_deploy_test
          env_name: test
          package_version: 1.0.0
          requires:
            - ekstep_data_pipelines_build
      - deploy-db:
          name: ekstep-database-migrations-apply-test
          mode: 'apply'
          env_name: 'test'
          requires:
            - ekstep_data_pipelines_deploy_test
      - build-dags:
          name: deploy-pipeline-workflow-dags-test
          env_name: test
          package_name: pipeline_workflows
          requires:
            - ekstep_data_pipelines_deploy_test
      - approval_for_prod_deploy
      - deploy:
          name: ekstep_data_pipelines_deploy_prod
          env_name: prod
          package_version: 1.0.0
          requires:
            - approval_for_prod_deploy
      - deploy-db:
          name: ekstep-database-migrations-apply-prod
          mode: 'apply'
          env_name: 'prod'
          requires:
            - ekstep_data_pipelines_deploy_prod
      - build-dags:
          name: deploy-pipeline-workflow-dags-prod
          env_name: prod
          package_name: pipeline_workflows
          requires:
            - ekstep_data_pipelines_deploy_prod
